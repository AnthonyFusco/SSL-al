contribute(currentType('groovy.lang.Script')) {
    method name: 'law', type: 'builders.LawBuilder', params: [name: 'java.lang.String']
    method name: 'sensorLot', type: 'builders.SensorsLotBuilder', params: [name: 'java.lang.String']

    method name: 'replay', type: 'builders.ReplayBuilder', params: [name: 'java.lang.String']
    method name: 'runSimulation', type: 'void', params: [
            name: 'java.lang.String',
            begin:'java.lang.String',
            end:'java.lang.String'
    ]
    method name: 'parkingLaw', type: 'builders.MarkovBuilder', params: [name: 'java.lang.String']
    method name: 'randomLaw', type: 'void', params: [name: 'java.lang.String']
    method name: 'parkingComposite', type: 'builders.CompositeBuilder', params: [name: 'java.lang.String']
    method name: 'composite', type: 'builders.CompositeBuilder', params: [name: 'java.lang.String']
    method name: 'resetDB', type: 'void'
}


contribute(currentType('builders.SensorsLotBuilder')){
    method name: 'sensorsNumber', type: 'builders.SensorsLotBuilder', params: [n: 'java.lang.Integer']
    method name: 'withLaw', type: 'builders.SensorsLotBuilder', params: [law: 'java.lang.String']
    method name: 'withFrequency', type: 'builders.SensorsLotBuilder', params: [freq: 'kernel.units.Frequency']
}




contribute(currentType('builders.LawBuilder')){

    method name: 'ofType', type: 'builders.LawBuilder',
            params: [type: 'java.lang.String']
}

/*contribute(currentType('typeLaw')){


      property(name: 'RandomLaw', type: 'java.lang.String')
      property(name: 'MarkovLaw', type: 'java.lang.String')
      property(name: 'FunctionLaw', type: 'java.lang.String')

}*/
/*
contribute(currentType('StatesDeclaration')){
    method name: 'transitions', type: 'TransitionDeclaration', params: [from: 'java.lang.String']
}
contribute(currentType('TransitionDeclaration')){
    method name: 'to', type: 'TransitionDeclaration', params: [to: 'java.lang.String']
    method name: 'with', type: 'TransitionDeclaration', params: [p: 'java.lang.Double']
    method name: 'and', type: 'TransitionDeclaration', params: [from: 'java.lang.String']
}



*/